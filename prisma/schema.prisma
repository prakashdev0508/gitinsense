generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id         String  @id @default(cuid())
    email      String  @unique
    name       String?
    externalId String  @unique

    imageUrl String?
    credits  Int     @default(150)

    projects      Projects[]
    savedQuestion SavedAnswers[]

    questionAsked Int @default(0)
    aiUsed        Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Projects {
    id          String  @id @default(cuid())
    name        String
    githubUrl   String
    githubToken String?

    user   User   @relation(fields: [userId], references: [externalId])
    userId String

    commitLogs    CommitLogs[]
    sourceCode    SourceCodeEmbeddings[]
    savedQuestion SavedAnswers[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt


}

model SourceCodeEmbeddings {
    id            String                      @id @default(cuid())
    fileName      String                      @unique
    summeryVector Unsupported("vector(768)")?
    summery       String
    sourceCode    String

    projectId String
    project   Projects @relation(fields: [projectId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CommitLogs {
    id                String   @id @default(cuid())
    sha               String
    commitDate        DateTime
    commitAuthor      String
    commitAuthorImage String

    fileChanged  Json?
    commitMesage String
    linesAdded   Int?
    linesDeleted Int?

    summary String?

    project   Projects @relation(fields: [projectId], references: [id])
    projectId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SavedAnswers {
    id       String @id @default(cuid())
    question String
    answer   String

    project   Projects @relation(fields: [projectId], references: [id])
    projectId String

    user   User   @relation(fields: [userId], references: [externalId])
    userId String 

    isDeletedAt DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}
